package main

import (
	"context"
	"log"
	"net/http"
	"strings"

	"connectrpc.com/connect"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	"reamde.dev/monolith/proto/example"                // generated by protoc-gen-go
	"reamde.dev/monolith/proto/example/exampleconnect" // generated by protoc-gen-connect-go
)

type PingServer struct{}

func (s *PingServer) Ping(
	ctx context.Context,
	req *connect.Request[example.PingRequest],
) (*connect.Response[example.PingResponse], error) {
	log.Println("Request headers: ", req.Header())
	res := connect.NewResponse(&example.PingResponse{
		Nonce: req.Msg.Nonce,
	})
	res.Header().Set("Ping-Version", "v1")
	return res, nil
}

type StringsServer struct{}

func (s *StringsServer) Upper(
	ctx context.Context,
	req *connect.Request[example.UpperRequest],
) (*connect.Response[example.UpperResponse], error) {
	log.Println("Request headers: ", req.Header())
	res := connect.NewResponse(&example.UpperResponse{
		Value: strings.ToUpper(req.Msg.Value),
	})
	res.Header().Set("Upper-Version", "v1")
	return res, nil
}

func main() {
	mux := http.NewServeMux()

	pingServer := &PingServer{}
	mux.Handle(exampleconnect.NewPingServiceHandler(pingServer))

	stringsServer := &StringsServer{}
	mux.Handle(exampleconnect.NewStringsServiceHandler(stringsServer))

	http.ListenAndServe(
		"localhost:8080",
		// Use h2c so we can serve HTTP/2 without TLS.
		h2c.NewHandler(mux, &http2.Server{}),
	)
}
