package main

import (
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

const (
	fmtPackage      = protogen.GoImportPath("fmt")
	contextPackage  = protogen.GoImportPath("context")
	errorsPackage   = protogen.GoImportPath("errors")
	httpPackage     = protogen.GoImportPath("net/http")
	stringsPackage  = protogen.GoImportPath("strings")
	monolithPackage = protogen.GoImportPath("reamde.dev/monolith/internal")
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

// generateFile generates a _monolith.pb.go file containing the rpc client and
// server implementations of the services defined in the file.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + ".monolith.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-monolith-go. DO NOT EDIT.")
	g.P("package ", file.GoPackageName)
	g.P()

	// type PingService interface {
	// 	Ping(context.Context, *internal.Request[PingRequest]) (*internal.Response[PingResponse], error)
	// }

	for _, service := range file.Services {
		g.P("type ", service.GoName, " interface {")
		for _, method := range service.Methods {
			g.P(
				method.GoName, "(",
				g.QualifiedGoIdent(contextPackage.Ident("Context")), ", ",
				"*", g.QualifiedGoIdent(monolithPackage.Ident("Request")), "[", g.QualifiedGoIdent(method.Input.GoIdent), "], ",
				") (",
				"*", g.QualifiedGoIdent(monolithPackage.Ident("Response")), "[", g.QualifiedGoIdent(method.Output.GoIdent), "], ",
				"error",
				")",
			)
		}
		g.P("}")
	}

	// func NewPingServiceHandlers(svc PingService) (internal.Handlers, error) {
	// 	return internal.Handlers{
	// 		"example.PingService": internal.NewHandler(svc.Ping),
	// 	}, nil
	// }

	g.P()
	for _, service := range file.Services {
		g.P("func New", service.GoName, "Handlers(svc ", service.GoName, ") (", g.QualifiedGoIdent(monolithPackage.Ident("Handlers")), ", error) {")
		g.P("return ", g.QualifiedGoIdent(monolithPackage.Ident("Handlers")), "{")
		for _, method := range service.Methods {
			g.P(
				"\"", file.Desc.Package(), ".", service.Desc.Name(), "/", method.Desc.Name(), "\": ",
				g.QualifiedGoIdent(monolithPackage.Ident("NewHandler")), "(svc.", method.GoName, "),",
			)
		}
		g.P("}, nil")
		g.P("}")
	}

	// func RegisterPingService(mgr *internal.SessionManager, svc PingService) error {
	// 	handlers, err := NewPingServiceHandlers(svc)
	// 	if err != nil {
	// 		return fmt.Errorf("failed to create handlers: %w", err)
	// 	}
	// 	err = mgr.RegisterHandlers(handlers)
	// 	if err != nil {
	// 		return fmt.Errorf("failed to register handlers: %w", err)
	// 	}
	// 	return nil
	// }

	g.P()
	for _, service := range file.Services {
		g.P("func Register", service.GoName, "(mgr *", g.QualifiedGoIdent(monolithPackage.Ident("SessionManager")), ", svc ", service.GoName, ") error {")
		g.P("handlers, err := New", service.GoName, "Handlers(svc)")
		g.P("if err != nil {")
		g.P("return ", g.QualifiedGoIdent(fmtPackage.Ident("Errorf")), "(\"failed to create handlers: %w\", err)")
		g.P("}")
		g.P("err = mgr.RegisterHandlers(handlers)")
		g.P("if err != nil {")
		g.P("return ", g.QualifiedGoIdent(fmtPackage.Ident("Errorf")), "(\"failed to register handlers: %w\", err)")
		g.P("}")
		g.P("return nil")
		g.P("}")
	}

	// func NewPingServiceClient(mgr *internal.SessionManager) PingService {
	// 	return &pingServiceClient{
	// 		mgr: mgr,
	// 	}
	// }

	g.P()
	for _, service := range file.Services {
		g.P("func New", service.GoName, "Client(mgr *", g.QualifiedGoIdent(monolithPackage.Ident("SessionManager")), ") ", service.GoName, " {")
		g.P("return &", strings.ToLower(service.GoName), "ServiceClient{")
		g.P("mgr: mgr,")
		g.P("}")
		g.P("}")
	}

	// type pingServiceClient struct {
	// 	mgr *internal.SessionManager
	// }

	for _, service := range file.Services {
		g.P()
		g.P("type ", strings.ToLower(service.GoName), "ServiceClient struct {")
		g.P("mgr *", g.QualifiedGoIdent(monolithPackage.Ident("SessionManager")))
		g.P("}")
	}

	// func (c *pingServiceClient) Ping(ctx context.Context, request *internal.Request[example.PingRequest]) (*internal.Response[example.PingResponse], error) {
	// 	return internal.MakeRequest[example.PingRequest, example.PingResponse](c.mgr, ctx, "example.PingService/Ping", request)
	// }

	for _, service := range file.Services {
		for _, method := range service.Methods {
			g.P()
			g.P("func (c *", strings.ToLower(service.GoName), "ServiceClient) ", method.GoName, "(ctx ", g.QualifiedGoIdent(contextPackage.Ident("Context")), ", request *", g.QualifiedGoIdent(monolithPackage.Ident("Request")), "[", g.QualifiedGoIdent(method.Input.GoIdent), "]) (*", g.QualifiedGoIdent(monolithPackage.Ident("Response")), "[", g.QualifiedGoIdent(method.Output.GoIdent), "], error) {")
			g.P("return ", g.QualifiedGoIdent(monolithPackage.Ident("MakeRequest")), "[", g.QualifiedGoIdent(method.Input.GoIdent), ", ", g.QualifiedGoIdent(method.Output.GoIdent), "](c.mgr, ctx, \"", file.Desc.Package(), ".", service.Desc.Name(), "/", method.Desc.Name(), "\", request)")
			g.P("}")
		}
	}

	return g
}
