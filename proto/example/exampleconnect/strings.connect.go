// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: example/strings.proto

package exampleconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	example "reamde.dev/monolith/proto/example"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// StringsServiceName is the fully-qualified name of the StringsService service.
	StringsServiceName = "example.StringsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StringsServiceUpperProcedure is the fully-qualified name of the StringsService's Upper RPC.
	StringsServiceUpperProcedure = "/example.StringsService/Upper"
)

// StringsServiceClient is a client for the example.StringsService service.
type StringsServiceClient interface {
	Upper(context.Context, *connect.Request[example.UpperRequest]) (*connect.Response[example.UpperResponse], error)
}

// NewStringsServiceClient constructs a client for the example.StringsService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStringsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StringsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &stringsServiceClient{
		upper: connect.NewClient[example.UpperRequest, example.UpperResponse](
			httpClient,
			baseURL+StringsServiceUpperProcedure,
			opts...,
		),
	}
}

// stringsServiceClient implements StringsServiceClient.
type stringsServiceClient struct {
	upper *connect.Client[example.UpperRequest, example.UpperResponse]
}

// Upper calls example.StringsService.Upper.
func (c *stringsServiceClient) Upper(ctx context.Context, req *connect.Request[example.UpperRequest]) (*connect.Response[example.UpperResponse], error) {
	return c.upper.CallUnary(ctx, req)
}

// StringsServiceHandler is an implementation of the example.StringsService service.
type StringsServiceHandler interface {
	Upper(context.Context, *connect.Request[example.UpperRequest]) (*connect.Response[example.UpperResponse], error)
}

// NewStringsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStringsServiceHandler(svc StringsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	stringsServiceUpperHandler := connect.NewUnaryHandler(
		StringsServiceUpperProcedure,
		svc.Upper,
		opts...,
	)
	return "/example.StringsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StringsServiceUpperProcedure:
			stringsServiceUpperHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStringsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStringsServiceHandler struct{}

func (UnimplementedStringsServiceHandler) Upper(context.Context, *connect.Request[example.UpperRequest]) (*connect.Response[example.UpperResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.StringsService.Upper is not implemented"))
}
