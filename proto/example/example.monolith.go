// Code generated by protoc-gen-monolith-go. DO NOT EDIT.
package example

import (
	context "context"
	fmt "fmt"
	internal "reamde.dev/monolith/internal"
)

type PingService interface {
	Ping(context.Context, *internal.Request[PingRequest]) (*internal.Response[PingResponse], error)
}

func NewPingServiceHandlers(svc PingService) (internal.Handlers, error) {
	return internal.Handlers{
		"example.PingService/Ping": internal.NewHandler(svc.Ping),
	}, nil
}

func RegisterPingService(mgr *internal.SessionManager, svc PingService) error {
	handlers, err := NewPingServiceHandlers(svc)
	if err != nil {
		return fmt.Errorf("failed to create handlers: %w", err)
	}
	err = mgr.RegisterHandlers(handlers)
	if err != nil {
		return fmt.Errorf("failed to register handlers: %w", err)
	}
	return nil
}

func NewPingServiceClient(mgr *internal.SessionManager) PingService {
	return &pingserviceServiceClient{
		mgr: mgr,
	}
}

type pingserviceServiceClient struct {
	mgr *internal.SessionManager
}

func (c *pingserviceServiceClient) Ping(ctx context.Context, request *internal.Request[PingRequest]) (*internal.Response[PingResponse], error) {
	return internal.MakeRequest[PingRequest, PingResponse](c.mgr, ctx, "example.PingService/Ping", request)
}
