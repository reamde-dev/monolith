// Code generated by protoc-gen-monolith-go. DO NOT EDIT.
package example

import (
	context "context"
	fmt "fmt"
	internal "reamde.dev/monolith/internal"
)

type StringsService interface {
	Upper(context.Context, *internal.Request[UpperRequest]) (*internal.Response[UpperResponse], error)
}

func NewStringsServiceHandlers(svc StringsService) (internal.Handlers, error) {
	return internal.Handlers{
		"example.StringsService/Upper": internal.NewHandler(svc.Upper),
	}, nil
}

func RegisterStringsService(mgr *internal.SessionManager, svc StringsService) error {
	handlers, err := NewStringsServiceHandlers(svc)
	if err != nil {
		return fmt.Errorf("failed to create handlers: %w", err)
	}
	err = mgr.RegisterHandlers(handlers)
	if err != nil {
		return fmt.Errorf("failed to register handlers: %w", err)
	}
	return nil
}

func NewStringsServiceClient(mgr *internal.SessionManager) StringsService {
	return &stringsserviceServiceClient{
		mgr: mgr,
	}
}

type stringsserviceServiceClient struct {
	mgr *internal.SessionManager
}

func (c *stringsserviceServiceClient) Upper(ctx context.Context, request *internal.Request[UpperRequest]) (*internal.Response[UpperResponse], error) {
	return internal.MakeRequest[UpperRequest, UpperResponse](c.mgr, ctx, "example.StringsService/Upper", request)
}
