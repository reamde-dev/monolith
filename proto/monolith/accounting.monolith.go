// Code generated by protoc-gen-monolith-go. DO NOT EDIT.
package monolith

import (
	context "context"
	fmt "fmt"
	internal "reamde.dev/monolith/internal"
)

type AccountingService interface {
	RegisterPeer(context.Context, *internal.Request[RegisterPeerRequest]) (*internal.Response[RegisterPeerResponse], error)
}

func NewAccountingServiceHandlers(svc AccountingService) (internal.Handlers, error) {
	return internal.Handlers{
		"monolith.AccountingService/RegisterPeer": internal.NewHandler(svc.RegisterPeer),
	}, nil
}

func RegisterAccountingService(mgr *internal.SessionManager, svc AccountingService) error {
	handlers, err := NewAccountingServiceHandlers(svc)
	if err != nil {
		return fmt.Errorf("failed to create handlers: %w", err)
	}
	err = mgr.RegisterHandlers(handlers)
	if err != nil {
		return fmt.Errorf("failed to register handlers: %w", err)
	}
	return nil
}

func NewAccountingServiceClient(mgr *internal.SessionManager) AccountingService {
	return &accountingserviceServiceClient{
		mgr: mgr,
	}
}

type accountingserviceServiceClient struct {
	mgr *internal.SessionManager
}

func (c *accountingserviceServiceClient) RegisterPeer(ctx context.Context, request *internal.Request[RegisterPeerRequest]) (*internal.Response[RegisterPeerResponse], error) {
	return internal.MakeRequest[RegisterPeerRequest, RegisterPeerResponse](c.mgr, ctx, "monolith.AccountingService/RegisterPeer", request)
}
