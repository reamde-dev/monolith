// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: monolith/accounting.proto

package monolithconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	monolith "reamde.dev/monolith/proto/monolith"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// AccountingServiceName is the fully-qualified name of the AccountingService service.
	AccountingServiceName = "monolith.AccountingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccountingServiceRegisterPeerProcedure is the fully-qualified name of the AccountingService's
	// RegisterPeer RPC.
	AccountingServiceRegisterPeerProcedure = "/monolith.AccountingService/RegisterPeer"
)

// AccountingServiceClient is a client for the monolith.AccountingService service.
type AccountingServiceClient interface {
	RegisterPeer(context.Context, *connect.Request[monolith.RegisterPeerRequest]) (*connect.Response[monolith.RegisterPeerResponse], error)
}

// NewAccountingServiceClient constructs a client for the monolith.AccountingService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccountingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &accountingServiceClient{
		registerPeer: connect.NewClient[monolith.RegisterPeerRequest, monolith.RegisterPeerResponse](
			httpClient,
			baseURL+AccountingServiceRegisterPeerProcedure,
			opts...,
		),
	}
}

// accountingServiceClient implements AccountingServiceClient.
type accountingServiceClient struct {
	registerPeer *connect.Client[monolith.RegisterPeerRequest, monolith.RegisterPeerResponse]
}

// RegisterPeer calls monolith.AccountingService.RegisterPeer.
func (c *accountingServiceClient) RegisterPeer(ctx context.Context, req *connect.Request[monolith.RegisterPeerRequest]) (*connect.Response[monolith.RegisterPeerResponse], error) {
	return c.registerPeer.CallUnary(ctx, req)
}

// AccountingServiceHandler is an implementation of the monolith.AccountingService service.
type AccountingServiceHandler interface {
	RegisterPeer(context.Context, *connect.Request[monolith.RegisterPeerRequest]) (*connect.Response[monolith.RegisterPeerResponse], error)
}

// NewAccountingServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountingServiceHandler(svc AccountingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accountingServiceRegisterPeerHandler := connect.NewUnaryHandler(
		AccountingServiceRegisterPeerProcedure,
		svc.RegisterPeer,
		opts...,
	)
	return "/monolith.AccountingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccountingServiceRegisterPeerProcedure:
			accountingServiceRegisterPeerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccountingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountingServiceHandler struct{}

func (UnimplementedAccountingServiceHandler) RegisterPeer(context.Context, *connect.Request[monolith.RegisterPeerRequest]) (*connect.Response[monolith.RegisterPeerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("monolith.AccountingService.RegisterPeer is not implemented"))
}
